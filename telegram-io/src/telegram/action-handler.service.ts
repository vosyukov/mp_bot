import { Injectable } from '@nestjs/common';
import { Markup } from 'telegraf';
import { LogTgEvent } from '../amplitude/amplitude.decorators';
import { MENU, PLANS, TgActions } from './telegram.controller';
import { InlineKeyboardMarkup } from 'telegraf/src/core/types/typegram';
import * as moment from 'moment';
import { TelegramService } from './telegram.service';

@Injectable()
export class ActionHandlerService {
  constructor(private readonly telegramService: TelegramService) {}

  @LogTgEvent()
  public async aboutBotAction(ctx): Promise<void> {
    await ctx.editMessageText(
      '–ú—ã - –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–ª–∏ —Å–µ—Ä–≤–∏—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–Ω—è—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è –∫–∞–∂–¥—ã–π.\n\n' +
        '‚û°Ô∏è–í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º, –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n' +
        '‚úÖ–ú—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤—ã–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã.',
      Markup.inlineKeyboard([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'mainMenu')]),
    );
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showProfitReportMenu(ctx): Promise<void> {
    const { id } = ctx.from;
    const { text, menu } = await this.buildInlineMenu(id, MENU.SALES_REPORTS);
    await ctx.editMessageText(text, menu);
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showSettingsMenu(ctx): Promise<void> {
    const { id } = ctx.from;
    const { text, menu } = await this.buildInlineMenu(id, MENU.SETTINGS);
    await ctx.editMessageText(text, { ...menu, parse_mode: 'HTML' });
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showBonusInfo(ctx): Promise<void> {
    const { id } = ctx.from;
    await ctx.editMessageText(
      `–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ —Å–µ—Ä–≤–∏—Å –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 5 –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ–ø–ª–∞—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è https://t.me/wb_sales_pro_bot?start=${id}`,
      Markup.inlineKeyboard([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'settings')]),
    );
    await ctx.answerCbQuery();
  }

  public async buildInlineMenu(userTgId: number, menuId: MENU): Promise<{ text: string; menu: Markup.Markup<InlineKeyboardMarkup> }> {
    const user = await this.telegramService.findUserByTgId(userTgId);
    const shop = await this.telegramService.findShopByUserTgId(userTgId);

    if (menuId === MENU.SUBSCRIBE_SETTINGS) {
      const menu = [];

      menu.push([Markup.button.callback(`–ù–∞ ${PLANS['PLAN_1'].month} –º–µ—Å—è—Ü –∑–∞ ${PLANS['PLAN_1'].amount} —Ä—É–±–ª–µ–π`, 'pay1')]);
      menu.push([Markup.button.callback(`–ù–∞ ${PLANS['PLAN_2'].month} –º–µ—Å—è—Ü–∞ –∑–∞ ${PLANS['PLAN_2'].amount} —Ä—É–±–ª–µ–π`, 'pay2')]);
      menu.push([Markup.button.callback(`–ù–∞ ${PLANS['PLAN_3'].month} –º–µ—Å—è—Ü–∞ –∑–∞ ${PLANS['PLAN_3'].amount} —Ä—É–±–ª–µ–π`, 'pay3')]);
      menu.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'settings')]);

      return {
        text: `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:`,
        menu: Markup.inlineKeyboard(menu),
      };
    }

    if (menuId === MENU.MAIN_MENU) {
      const menu = [];
      let text = '';
      if (shop) {
        text = '–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ—Ç—á–µ—Ç—ã.';
        menu.push([Markup.button.callback('üí∏ C–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤', 'costPrice')]);
        menu.push([Markup.button.callback('üî∏ –û—Ç—á–µ—Ç –ø–æ –ø—Ä–∏–±—ã–ª–∏', 'salesReport')]);
      } else {
        text = '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –±–æ—Ç –º–æ–≥ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å API –∫–ª—é—á';
        menu.push([Markup.button.callback('üîë –ü–æ–¥–∫–ª—é—á–∏—Ç—å API –∫–ª—é—á', 'newKey')]);
        menu.push([
          Markup.button.url(
            'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é API –∫–ª—é—á–∞',
            'https://telegra.ph/Podrobnaya-instrukciya-po-sozdaniyu-API-klyucha-Wildberries-i-privyazke-ego-k-nashemu-botu-WB-Otchety-12-16',
          ),
        ]);
      }

      menu.push([Markup.button.callback('‚ùî –û —Å–µ—Ä–≤–∏—Å–µ', 'aboutBot')]);
      menu.push([Markup.button.url('üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', 'https://t.me/+eWcHz7NUoW80ODhi')]);

      return {
        text: text,
        menu: Markup.inlineKeyboard(menu),
      };
    }

    if (menuId === MENU.ADD_API_KEY) {
      const menu = [];

      menu.push([Markup.button.callback('‚ûï –ò–∑–º–µ–Ω–∏—Ç—å API –∫–ª—é—á', 'newKey')]);
      menu.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back')]);

      return {
        text: `–í–∞—à —Ç–µ–∫—É—â–∏–π API –∫–ª—é—á ${shop?.token}`,
        menu: Markup.inlineKeyboard(menu),
      };
    }

    if (menuId === MENU.SETTINGS) {
      const tax = await this.telegramService.getTaxPercent(userTgId);

      const menu = [];

      if (shop) {
        menu.push([Markup.button.callback('‚ûï –ò–∑–º–µ–Ω–∏—Ç—å API –∫–ª—é—á', 'newKey')]);
      }

      menu.push([Markup.button.callback('üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'subscribeSettings')]);
      menu.push([Markup.button.callback('–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å', 'bonus')]);
      menu.push([Markup.button.callback('–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–æ–≥–æ–æ–±–ª–∞–∂–µ–Ω–∏—è', 'taxPercent')]);

      const countDays = moment(user.subscriptionExpirationDate).diff(moment(), 'days');

      return {
        text: `<b>–ü–æ–¥–ø–∏—Å–∫–∞</b> –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${countDays} –¥–Ω—è(–µ–π)\nAPI –∫–ª—é—á: <i>${shop?.token || '-'}</i>\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–æ–≥–æ–æ–±–ª–∞–∂–µ–Ω–∏—è: ${tax}%`,
        menu: Markup.inlineKeyboard(menu),
      };
    }

    if (menuId === MENU.COST_PRICE) {
      const menu = [];

      menu.push([Markup.button.callback('üí∏ Ô∏è–¢–µ–∫—É—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å', TgActions.GET_COST_PRICE)]);
      menu.push([Markup.button.callback('üîÑÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å', TgActions.UPDATE_COST_PRICE)]);
      menu.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'mainMenu')]);

      return {
        text: '–ß—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Ç—á–µ—Ç, –æ—Ç –í–∞—Å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú–¢–µ–∫—É—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å‚Äù —è –≤—ã–≥—Ä—É–∂—É –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ –≤—Å–µ–º–∏ –í–∞—à–∏–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏, –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äú–ó–∞–≥—Ä—É–∑–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å‚Äù –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.',
        menu: Markup.inlineKeyboard(menu),
      };
    }

    if (menuId === MENU.SALES_REPORTS) {
      if (user.subscriptionExpirationDate < moment().toDate()) {
        const menu = [];
        menu.push([Markup.button.callback('üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'subscribeSettings')]);
        return {
          text: '–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å',
          menu: Markup.inlineKeyboard(menu),
        };
      }

      const menu = [];

      menu.push([Markup.button.callback('–û—Ç—á—ë—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º', 'reportByVendorCode')]);
      menu.push([Markup.button.callback('–û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤', 'reportByProduct')]);
      menu.push([Markup.button.callback('–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç', 'summaryReportByProduct')]);
      menu.push([Markup.button.callback('–û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É', 'dev')]);
      menu.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back')]);

      return {
        text: '–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ç—ã—Ä–µ –≤–∏–¥–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤. \n',
        menu: Markup.inlineKeyboard(menu),
      };
    }

    throw new Error(`Invalid menu ID: ${menuId}`);
  }
}
