import { Injectable } from '@nestjs/common';
import { Markup } from 'telegraf';
import { LogTgEvent } from '../amplitude/amplitude.decorators';
import { MENU, PLANS, TgActions } from './telegram.controller';
import { InlineKeyboardMarkup } from 'telegraf/src/core/types/typegram';
import * as moment from 'moment';
import { TelegramService } from './telegram.service';

const BUTTONS: Record<string, string> = {
  connectWB: '‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—å WB –∞–∫–∫–∞—É–Ω—Ç',
  back: 'üîô –ù–∞–∑–∞–¥',
  report: 'üìä –û—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
  costPrice: 'üí∏ C–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤',
  uploadCostPrice: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏',
  button_10: 'üü¢ –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü',
  button_11: 'üü† –ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü',
  button_12: 'üü£ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥',
  button_13: '–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤)',
  button_14: '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
};

let anyPeriodByVendorCode = false;
let anyPeriodByProduct = false;

@Injectable()
export class ActionHandlerService {
  constructor(private readonly telegramService: TelegramService) {}

  @LogTgEvent()
  public async showAboutBot(ctx): Promise<void> {
    await ctx.editMessageText(
      '–ú—ã - –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–ª–∏ —Å–µ—Ä–≤–∏—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–Ω—è—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è –∫–∞–∂–¥—ã–π.\n\n' +
        '‚û°Ô∏è–í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º, –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n' +
        '‚úÖ–ú—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤—ã–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã.',
      Markup.inlineKeyboard([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'mainMenu')]),
    );
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showProfitReportMenu(ctx): Promise<void> {
    const { id } = ctx.from;
    const { text, menu } = await this.buildInlineMenu(id, MENU.SALES_REPORTS);
    await ctx.editMessageText(text, menu);
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showSettingsMenu(ctx): Promise<void> {
    const { id } = ctx.from;
    const { text, menu } = await this.buildInlineMenu(id, MENU.SETTINGS);
    await ctx.editMessageText(text, { ...menu, parse_mode: 'HTML' });
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showBonusInfo(ctx): Promise<void> {
    const { id } = ctx.from;
    await ctx.editMessageText(
      `–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ —Å–µ—Ä–≤–∏—Å –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 5 –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ–ø–ª–∞—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è https://t.me/wb_sales_pro_bot?start=${id}`,
      Markup.inlineKeyboard([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'settings')]),
    );
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showMainMenu(ctx): Promise<void> {
    const { id } = ctx.from;
    const { text, menu } = await this.buildInlineMenu(id, MENU.MAIN_MENU);
    await ctx.reply(text, menu);
  }

  @LogTgEvent()
  public async showMainSettingsMenu(ctx): Promise<void> {
    const { id } = ctx.from;
    const { text, menu } = await this.buildInlineMenu(id, MENU.SETTINGS);
    await ctx.reply(text, { ...menu, parse_mode: 'HTML' });
    return;
  }

  @LogTgEvent()
  public async showPay1Info(ctx): Promise<void> {
    const { id } = ctx.from;
    const url = await this.telegramService.createPayment(id, 'PLAN_1');
    await ctx.editMessageText(
      '\n' +
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü –∑–∞ 490 —Ä—É–±. –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–∂–º–∏—Ç–µ ‚Äú–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ‚Äù –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –æ–Ω–ª–∞–π–Ω –∫–∞—Å—Å—É. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã. –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—Å—è.',
      Markup.inlineKeyboard([[Markup.button.url('üí∏ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url)], [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'subscribeSettings')]]),
    );
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showPay2Info(ctx): Promise<void> {
    const { id } = ctx.from;
    const url = await this.telegramService.createPayment(id, 'PLAN_2');
    await ctx.editMessageText(
      '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 2 –º–µ—Å—è—Ü–∞ –∑–∞ 800 —Ä—É–±. (–í–∞—à–∞ –≤—ã–≥–æ–¥–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç 180 —Ä—É–±.) –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–∂–º–∏—Ç–µ ‚Äú–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ‚Äù –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –æ–Ω–ª–∞–π–Ω –∫–∞—Å—Å—É. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã. –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—Å—è.',
      Markup.inlineKeyboard([[Markup.button.url('üí∏ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url)], [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'subscribeSettings')]]),
    );
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showPay3Info(ctx): Promise<void> {
    const { id } = ctx.from;
    const url = await this.telegramService.createPayment(id, 'PLAN_3');
    await ctx.editMessageText(
      '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –∑–∞ 1200 —Ä—É–±. (–í–∞—à–∞ –≤—ã–≥–æ–¥–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç 270 —Ä—É–±.) –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–∂–º–∏—Ç–µ ‚Äú–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ‚Äù –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –æ–Ω–ª–∞–π–Ω –∫–∞—Å—Å—É. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã. –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—Å—è.',
      Markup.inlineKeyboard([[Markup.button.url('üí∏ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url)], [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'subscribeSettings')]]),
    );
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showTaxSettings(ctx): Promise<void> {
    await ctx.reply('–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã –æ—Ç—á–∏—Å–ª–µ–Ω–∏–π, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è');
    ctx.session.action = 'taxPercent';
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showSubscribeSettings(ctx): Promise<void> {
    const { id } = ctx.from;
    const { text, menu } = await this.buildInlineMenu(id, MENU.SUBSCRIBE_SETTINGS);

    await ctx.editMessageText(text, menu);
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async downloadCostPrise(ctx): Promise<void> {
    const { id } = ctx.from;

    const document = await this.telegramService.getPrice(id);

    await ctx.telegram.sendDocument(ctx.from.id, document, {
      caption: '–°–∫–∞—á–∞–π—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Å–≤–æ–∏–º —Ç–æ–≤–∞—Ä–∞–º',
    });
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async uploadCostPrise(ctx): Promise<void> {
    ctx.session.action = 'uploadPrice';
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏');
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showAddApiKey(ctx): Promise<void> {
    ctx.session.action = TgActions.ENTERING_API_KEY;

    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏');
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showCostPriceMenu(ctx): Promise<void> {
    const { id } = ctx.from;
    const { text, menu } = await this.buildInlineMenu(id, MENU.COST_PRICE);
    await ctx.editMessageText(text, menu);
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showProfitReportByVendorCodeMenu(ctx): Promise<void> {
    await ctx.editMessageText(
      '–û—Ç—á–µ—Ç –ø–æ –∫–∞–∂–¥–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤. –í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
      Markup.inlineKeyboard([
        [Markup.button.callback(BUTTONS.button_10, TgActions.SHOW_PROFIT_REPORT_BY_VENDOR_CODE_CURRENT_MONTH)],
        [Markup.button.callback(BUTTONS.button_11, TgActions.SHOW_PROFIT_REPORT_BY_VENDOR_CODE_PREVOUS_MONTH)],
        [Markup.button.callback(BUTTONS.button_12, TgActions.SHOW_PROFIT_REPORT_BY_VENDOR_CODE_ANY_PERIOD)],
        [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', TgActions.SHOW_PROFIT_REPORT_MENU)],
      ]),
    );
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showProfitReportByVendorCodePreviousMonth(ctx): Promise<void> {
    const { id } = ctx.from;
    const document = await this.telegramService.getSaleReportByVendorCodeForPreviousMonth(id);

    await ctx.telegram.sendDocument(id, document, {
      caption: document.description,
    });
    await ctx.answerCbQuery();
    return;
  }

  @LogTgEvent()
  public async showProfitReportByVendorCodeCurrentMonth(ctx): Promise<void> {
    const { id } = ctx.from;

    const document = await this.telegramService.getSaleReportByVendorCodeForCurrentMonth(id);

    await ctx.telegram.sendDocument(id, document, {
      caption: document.description,
    });
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showProfitReportByVendorCodeAnyPeriod(ctx): Promise<void> {
    await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 11.11.1111-11.11.1111');
    anyPeriodByVendorCode = true;
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showProfitReportByProductCodeMenu(ctx): Promise<void> {
    await ctx.editMessageText(
      '–û—Ç—á–µ—Ç —Å–∂–∞—Ç—ã–π –¥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –í—ã –≤–∏–¥–∏—Ç–µ –∫–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç. –í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
      Markup.inlineKeyboard([
        [Markup.button.callback(BUTTONS.button_10, TgActions.SHOW_PROFIT_REPORT_BY_PRODUCT_CURRENT_MONTH)],
        [Markup.button.callback(BUTTONS.button_11, TgActions.SHOW_PROFIT_REPORT_BY_PRODUCT_PREVOUS_MONTH)],
        [Markup.button.callback(BUTTONS.button_12, TgActions.SHOW_PROFIT_REPORT_BY_PRODUCT_ANY_PERIOD)],
        [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', TgActions.SHOW_PROFIT_REPORT_MENU)],
      ]),
    );
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showProfitReportByProductPreviousMonth(ctx): Promise<void> {
    const { id } = ctx.from;
    const document = await this.telegramService.getSaleReportByProductForPreviousMonth(id);

    await ctx.telegram.sendDocument(id, document, {
      caption: document.description,
    });
    await ctx.answerCbQuery();
    return;
  }

  @LogTgEvent()
  public async showProfitReportByProductCurrentMonth(ctx): Promise<void> {
    const { id } = ctx.from;

    const document = await this.telegramService.getSaleReportByProductCurrentMonth(id);

    await ctx.telegram.sendDocument(id, document, {
      caption: document.description,
    });
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showProfitReportByProductAnyPeriod(ctx): Promise<void> {
    await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 11.11.1111-11.11.1111');
    await ctx.answerCbQuery();
    anyPeriodByProduct = true;
  }

  @LogTgEvent()
  public async showProfitReportSummaryCodeMenu(ctx): Promise<void> {
    await ctx.editMessageText(
      '–û—Ç—á–µ—Ç —Å–∂–∞—Ç—ã–π –¥–æ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –í–∞—à–∏–º —Ç–æ–≤–∞—Ä–∞–º. –í—ã–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–∏–æ–¥: –º–µ—Å—è—Ü –∏–ª–∏ –Ω–µ–¥–µ–ª—è',
      Markup.inlineKeyboard([
        [Markup.button.callback(BUTTONS.button_10, TgActions.SHOW_PROFIT_REPORT_SUMMARY_CURRENT_MONTH)],
        [Markup.button.callback(BUTTONS.button_11, TgActions.SHOW_PROFIT_REPORT_SUMMARY_PREVOUS_MONTH)],
        [Markup.button.callback(BUTTONS.button_12, TgActions.SHOW_PROFIT_REPORT_SUMMARY_ANY_PERIOD)],
        [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', TgActions.SHOW_PROFIT_REPORT_MENU)],
      ]),
    );

    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showProfitReportSummaryPreviousMonth(ctx): Promise<void> {
    ctx.session.action = 'enteringAdvertisingCosts';
    const fromDate = moment().subtract(1, 'months').startOf('month').toDate();
    const toDate = moment().subtract(1, 'months').endOf('month').toDate();
    ctx.session.data = { fromDate: fromDate, toDate: toDate };
    ctx.reply('–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É');
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showProfitReportSummaryCurrentMonth(ctx): Promise<void> {
    ctx.session.action = 'enteringAdvertisingCosts';
    const fromDate = moment().startOf('month').toDate();
    const toDate = moment().endOf('month').toDate();
    ctx.session.data = { fromDate: fromDate, toDate: toDate };
    ctx.reply('–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É');
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showProfitReportSummaryAnyPeriod(ctx): Promise<void> {
    await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 11.11.1111-11.11.1111');
    await ctx.answerCbQuery();
    ctx.session.action = TgActions.ENTERING_DATE_FOR_SUMMARY_REPORT;
  }

  @LogTgEvent()
  public async showOnDev(ctx): Promise<void> {
    await ctx.reply('–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
    await ctx.answerCbQuery();
  }

  @LogTgEvent()
  public async showMainMenu2(ctx): Promise<void> {
    const { id } = ctx.from;
    const { text, menu } = await this.buildInlineMenu(id, MENU.MAIN_MENU);
    await ctx.editMessageText(text, menu);
    await ctx.answerCbQuery();
  }

  public async buildInlineMenu(userTgId: number, menuId: MENU): Promise<{ text: string; menu: Markup.Markup<InlineKeyboardMarkup> }> {
    const user = await this.telegramService.findUserByTgId(userTgId);
    const shop = await this.telegramService.findShopByUserTgId(userTgId);

    if (menuId === MENU.SUBSCRIBE_SETTINGS) {
      const menu = [];

      menu.push([Markup.button.callback(`–ù–∞ ${PLANS['PLAN_1'].month} –º–µ—Å—è—Ü –∑–∞ ${PLANS['PLAN_1'].amount} —Ä—É–±–ª–µ–π`, 'pay1')]);
      menu.push([Markup.button.callback(`–ù–∞ ${PLANS['PLAN_2'].month} –º–µ—Å—è—Ü–∞ –∑–∞ ${PLANS['PLAN_2'].amount} —Ä—É–±–ª–µ–π`, 'pay2')]);
      menu.push([Markup.button.callback(`–ù–∞ ${PLANS['PLAN_3'].month} –º–µ—Å—è—Ü–∞ –∑–∞ ${PLANS['PLAN_3'].amount} —Ä—É–±–ª–µ–π`, 'pay3')]);
      menu.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', TgActions.SHOW_SETTINGS)]);

      return {
        text: `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:`,
        menu: Markup.inlineKeyboard(menu),
      };
    }

    if (menuId === MENU.MAIN_MENU) {
      const menu = [];
      let text = '';
      if (shop) {
        text = '–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ—Ç—á–µ—Ç—ã.';
        menu.push([Markup.button.callback('üí∏ C–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤', TgActions.SHOW_COST_PRICE_MENU)]);
        menu.push([Markup.button.callback('üî∏ –û—Ç—á–µ—Ç –ø–æ –ø—Ä–∏–±—ã–ª–∏', TgActions.SHOW_PROFIT_REPORT_MENU)]);
      } else {
        text = '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –±–æ—Ç –º–æ–≥ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å API –∫–ª—é—á';
        menu.push([Markup.button.callback('üîë –ü–æ–¥–∫–ª—é—á–∏—Ç—å API –∫–ª—é—á', TgActions.SHOW_ADD_API_KEY)]);
        menu.push([
          Markup.button.url(
            'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é API –∫–ª—é—á–∞',
            'https://telegra.ph/Podrobnaya-instrukciya-po-sozdaniyu-API-klyucha-Wildberries-i-privyazke-ego-k-nashemu-botu-WB-Otchety-12-16',
          ),
        ]);
      }

      menu.push([Markup.button.callback('‚ùî –û —Å–µ—Ä–≤–∏—Å–µ', TgActions.SHOW_ABOUT_BOT)]);
      menu.push([Markup.button.url('üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', 'https://t.me/+eWcHz7NUoW80ODhi')]);
      menu.push([Markup.button.callback('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', TgActions.SHOW_SETTINGS)]);

      return {
        text: text,
        menu: Markup.inlineKeyboard(menu),
      };
    }

    if (menuId === MENU.ADD_API_KEY) {
      const menu = [];

      menu.push([Markup.button.callback('‚ûï –ò–∑–º–µ–Ω–∏—Ç—å API –∫–ª—é—á', TgActions.SHOW_ADD_API_KEY)]);
      menu.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', TgActions.SHOW_MAIN_MENU2)]);

      return {
        text: `–í–∞—à —Ç–µ–∫—É—â–∏–π API –∫–ª—é—á ${shop?.token}`,
        menu: Markup.inlineKeyboard(menu),
      };
    }

    if (menuId === MENU.SETTINGS) {
      const tax = await this.telegramService.getTaxPercent(userTgId);

      const menu = [];

      if (shop) {
        menu.push([Markup.button.callback('‚ûï –ò–∑–º–µ–Ω–∏—Ç—å API –∫–ª—é—á', TgActions.SHOW_ADD_API_KEY)]);
      }

      menu.push([Markup.button.callback('üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', TgActions.SHOW_SUBSCRIBE_SETTINGS)]);
      menu.push([Markup.button.callback('–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å', TgActions.SHOW_BONUS_INFO)]);
      menu.push([Markup.button.callback('–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–æ–≥–æ–æ–±–ª–∞–∂–µ–Ω–∏—è', TgActions.SHOW_TAX_SETTINGS)]);

      const countDays = moment(user.subscriptionExpirationDate).diff(moment(), 'days');

      return {
        text: `<b>–ü–æ–¥–ø–∏—Å–∫–∞</b> –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${countDays} –¥–Ω—è(–µ–π)\nAPI –∫–ª—é—á: <i>${shop?.token || '-'}</i>\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–æ–≥–æ–æ–±–ª–∞–∂–µ–Ω–∏—è: ${tax}%`,
        menu: Markup.inlineKeyboard(menu),
      };
    }

    if (menuId === MENU.COST_PRICE) {
      const menu = [];

      menu.push([Markup.button.callback('üí∏ Ô∏è–¢–µ–∫—É—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å', TgActions.DOWNLOAD_COST_PRICE)]);
      menu.push([Markup.button.callback('üîÑÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å', TgActions.UPLOAD_COST_PRICE)]);
      menu.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', TgActions.SHOW_MAIN_MENU2)]);

      return {
        text: '–ß—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Ç—á–µ—Ç, –æ—Ç –í–∞—Å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú–¢–µ–∫—É—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å‚Äù —è –≤—ã–≥—Ä—É–∂—É –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ –≤—Å–µ–º–∏ –í–∞—à–∏–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏, –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äú–ó–∞–≥—Ä—É–∑–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å‚Äù –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.',
        menu: Markup.inlineKeyboard(menu),
      };
    }

    if (menuId === MENU.SALES_REPORTS) {
      if (user.subscriptionExpirationDate < moment().toDate()) {
        const menu = [];
        menu.push([Markup.button.callback('üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', TgActions.SHOW_SUBSCRIBE_SETTINGS)]);
        return {
          text: '–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å',
          menu: Markup.inlineKeyboard(menu),
        };
      }

      const menu = [];

      menu.push([Markup.button.callback('–û—Ç—á—ë—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º', TgActions.SHOW_PROFIT_REPORT_MENU)]);
      menu.push([Markup.button.callback('–û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤', TgActions.SHOW_PROFIT_REPORT_BY_PRODUCT_MENU)]);
      menu.push([Markup.button.callback('–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç', TgActions.SHOW_PROFIT_REPORT_SUMMARY_MENU)]);
      menu.push([Markup.button.callback('–û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É', TgActions.SHOW_ON_DEV)]);
      menu.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', TgActions.SHOW_MAIN_MENU2)]);

      return {
        text: '–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ç—ã—Ä–µ –≤–∏–¥–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤. \n',
        menu: Markup.inlineKeyboard(menu),
      };
    }

    throw new Error(`Invalid menu ID: ${menuId}`);
  }
}
