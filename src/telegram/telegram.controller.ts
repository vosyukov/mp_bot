/* eslint-disable @typescript-eslint/ban-ts-comment */
import { Update, Ctx, Start, Help, On, Hears, Command, InjectBot, Message } from 'nestjs-telegraf';
import { UserRegistrationService } from '../user/services/user-registration.service';
import { Markup, Telegraf, Context, session, Composer } from 'telegraf';
import { ProductPriceTemplateService } from '../product/services/product-price-template.service';
import { UserService } from '../user/services/user.service';
import { HttpService } from '@nestjs/axios';
import { map } from 'rxjs';
import { WbXlsxReportBuilder } from '../wb_stats/services/wb-xlsx-report-builder';
type TelegrafContext = any;
import * as moment from 'moment';
import { Scenes } from 'telegraf';
import { WbApiService } from '../wb-api/wb-api.service';
import { ShopServices } from '../shop/services/shop.services';
import { InlineKeyboardMarkup, ReplyKeyboardMarkup } from 'telegraf/src/core/types/typegram';
import { WbParserSalesReportService } from '../wb_stats/services/wb-parser-sales-report.service';
import { TelegramService } from './telegram.service';
import { TARIFF_PLANS } from '../payment/payment.service';

const BUTTONS: Record<string, string> = {
  connectWB: '‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—å WB –∞–∫–∫–∞—É–Ω—Ç',
  back: 'üîô –ù–∞–∑–∞–¥',
  report: 'üìä –û—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
  costPrice: 'üí∏ C–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤',
  uploadCostPrice: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏',
  button_10: 'üü¢ –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü',
  button_11: 'üü† –ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü',
  button_12: 'üü£ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥',
  button_13: '–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤)',
  button_14: '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
};

enum SCENES {
  CONNECT_WB = 'CONNECT_WB',
  MAIN_MENU = 'MAIN_MENU',
  REPORT = 'REPORT',
  REPORT3 = 'REPORT3',
  SET_COST_PRICE = 'SET_COST_PRICE',
  SET_COST_PRICE2 = 'SET_COST_PRICE2',
}

let uploadPrice = false;
let addApiKey = false;
let anyPeriodByVendorCode = false;

@Update()
export class TelegramController {
  // @ts-ignore
  private stage: Scenes.Stage;
  constructor(
    private readonly userRegistrationService: UserRegistrationService,
    private readonly productPriceTemplateService: ProductPriceTemplateService,
    private readonly userService: UserService,
    private readonly httpService: HttpService,
    private readonly wbXlsxReportBuilder: WbXlsxReportBuilder,
    private readonly wbApiService: WbApiService,
    private readonly wbParserSalesReportService: WbParserSalesReportService,
    private readonly shopServices: ShopServices,
    private readonly telegramService: TelegramService,
    @InjectBot() private bot: Telegraf<TelegrafContext>,
  ) {
    // @ts-ignore
    this.stage = new Scenes.Stage<Context>([this.getMainMenuScene()], {
      default: SCENES.MAIN_MENU,
    });
    this.bot.use(session()); // to  be precise, session is not a must have for Scenes to work, but it sure is lonely without one
    this.bot.use(this.stage.middleware());

    // @ts-ignore//
    this.bot.command('start', Scenes.Stage.enter(SCENES.MAIN_MENU));
  }

  public getMainMenuScene(): any {
    const stepHandler = new Composer<Scenes.WizardContext>();

    stepHandler.action('getCostPrice', async (ctx) => {
      const { id } = ctx.from;
      const user = await this.userService.findUserByTgId(id);
      const buffer = await this.productPriceTemplateService.getPriceTemplate(user.id);

      await ctx.telegram.sendDocument(ctx.from.id, {
        source: buffer,
        filename: 'price.xlsx',
      });
      await ctx.reply('–°–∫–∞—á–∞–π—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Å–≤–æ–∏–º —Ç–æ–≤–∞—Ä–∞–º');
      await ctx.answerCbQuery();
    });

    stepHandler.action('updateCostPrice', async (ctx) => {
      uploadPrice = true;
      return ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏');
    });

    stepHandler.action('pay1', async (ctx) => {
      const { id } = ctx.from;
      const url = await this.telegramService.createPayment(id, TARIFF_PLANS.TARRIFF_1);
      return ctx.editMessageText(
        '1',
        Markup.inlineKeyboard([[Markup.button.url('üí∏ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url)], [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'subscribeSettings')]]),
      );
    });

    stepHandler.action('pay2', async (ctx) => {
      const { id } = ctx.from;
      const url = await this.telegramService.createPayment(id, TARIFF_PLANS.TARRIFF_2);
      return ctx.editMessageText(
        '2',
        Markup.inlineKeyboard([[Markup.button.url('üí∏ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url)], [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'subscribeSettings')]]),
      );
    });

    stepHandler.action('pay3', async (ctx) => {
      const { id } = ctx.from;
      const url = await this.telegramService.createPayment(id, TARIFF_PLANS.TARRIFF_3);
      return ctx.editMessageText(
        '3',
        Markup.inlineKeyboard([[Markup.button.url('üí∏ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url)], [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'subscribeSettings')]]),
      );
    });

    stepHandler.action('costPrice', async (ctx) => {
      return ctx.editMessageText(
        '–ß—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Ç—á–µ—Ç, –æ—Ç –í–∞—Å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú–¢–µ–∫—É—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å‚Äù —è –≤—ã–≥—Ä—É–∂—É –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ –≤—Å–µ–º–∏ –í–∞—à–∏–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏, –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äú–ó–∞–≥—Ä—É–∑–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å‚Äù –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n',
        Markup.inlineKeyboard([
          [Markup.button.callback('üí∏ Ô∏è–¢–µ–∫—É—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å', 'getCostPrice')],
          [Markup.button.callback('üîÑÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å', 'updateCostPrice')],
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back')],
        ]),
      );
    });

    stepHandler.action('aboutBot', async (ctx) => {
      const { id } = ctx.from;
      return ctx.editMessageText('–¢–µ–∫—Å—Ç –æ –±–æ—Ç–µ...', Markup.inlineKeyboard([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back')]));
    });

    stepHandler.action('back', async (ctx) => {
      const { id } = ctx.from;
      const { text, menu } = await this.buildInlineMenu(id, 'MAIN_MENU');
      return ctx.editMessageText(text, menu);
    });

    stepHandler.action('addKey', async (ctx) => {
      const { id } = ctx.from;
      const { text, menu } = await this.buildInlineMenu(id, 'ADD_API_KEY');
      return ctx.editMessageText(text, menu);
    });

    stepHandler.action('currentMonthByVendorCode', async (ctx) => {
      const { id } = ctx.from;

      const document = await this.telegramService.getSaleReportByVendorCodeForCurrentMonth(id);
      // @ts-ignore
      await ctx.telegram.sendDocument(id, document);
      await ctx.answerCbQuery();
      return;
    });

    stepHandler.action('previousMonthByVendorCode', async (ctx) => {
      const { id } = ctx.from;
      const document = await this.telegramService.getSaleReportByVendorCodeForPreviousMonth(id);
      // @ts-ignore
      await ctx.telegram.sendDocument(id, document);
      await ctx.answerCbQuery();
      return;
    });

    stepHandler.action('anyPeriodByVendorCode', async (ctx) => {
      await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 11.11.1111-11.11.1111');
      anyPeriodByVendorCode = true;
    });

    stepHandler.action('reportByVendorCode', async (ctx) => {
      const { id } = ctx.from;
      return ctx.editMessageText(
        '–¢–µ–∫—Å—Ç...',
        Markup.inlineKeyboard([
          [Markup.button.callback(BUTTONS.button_10, 'currentMonthByVendorCode')],
          [Markup.button.callback(BUTTONS.button_11, 'previousMonthByVendorCode')],
          [Markup.button.callback(BUTTONS.button_12, 'anyPeriodByVendorCode')],
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back')],
        ]),
      );
    });

    stepHandler.action('newKey', async (ctx) => {
      addApiKey = true;
      await ctx.reply('–û—Ç–ø—Ä–∞–≤—Ç–µ –≤–∞—à –∫–ª—é—á –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏');
      await ctx.answerCbQuery();
    });

    stepHandler.action('dev', async (ctx) => {
      addApiKey = true;
      await ctx.reply('–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
      await ctx.answerCbQuery();
    });

    stepHandler.action('subscribeSettings', async (ctx) => {
      const { id } = ctx.from;
      const { text, menu } = await this.buildInlineMenu(id, 'SUBSCRIBE_SETTINGS');
      return ctx.editMessageText(text, menu);
    });

    stepHandler.action('salesReport', async (ctx) => {
      return await ctx.editMessageText(
        '–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ç—ã—Ä–µ –≤–∏–¥–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤. \n' +
          '1.–û—Ç—á–µ—Ç —Å —Ü–∏—Ñ—Ä–∞–º–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –í–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤. \n' +
          '2.–û—Ç—á–µ—Ç —Å–∂–∞—Ç—ã–π –¥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –í—ã –≤–∏–¥–∏—Ç–µ –∫–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç. \n' +
          '3.–û—Ç—á–µ—Ç —Å–∂–∞—Ç—ã–π –¥–æ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. –í—ã —É–≤–∏–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤, –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –∏ –∏—Ö —Å—É–º–º—ã. –ú—ã –ø–æ—Å—á–∏—Ç–∞–µ–º –æ–±—â—É—é –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤–µ—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä, —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –Ω–∞–ª–æ–≥–∏ –∏ –í–∞—à—É —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å.\n' +
          '4.–û—Ç—á–µ—Ç –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É. –ï—Å–ª–∏ –¥–ª—è –í–∞—Å –≤–∞–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –ø—Ä–æ–¥–∞–µ—Ç—Å—è –≤–∞—à —Ç–æ–≤–∞—Ä. \n',
        Markup.inlineKeyboard([
          [Markup.button.callback('–û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤', 'dev')],
          [Markup.button.callback('–û—Ç—á–µ—Ç –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º', 'reportByVendorCode')],
          [Markup.button.callback('–û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É', 'dev')],
          [Markup.button.callback('–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç', 'dev')],
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back')],
        ]),
      );
    });

    stepHandler.on('document', async (ctx) => {
      if (uploadPrice) {
        const link = await ctx.telegram.getFileLink(ctx.update.message.document.file_id);
        console.log(link);

        const data = await this.httpService
          .get(link.href, { responseType: 'arraybuffer' })
          .pipe(map(({ data }) => data))
          .toPromise();

        const { id } = ctx.message.from;
        const user = await this.userService.findUserByTgId(id);
        await this.productPriceTemplateService.setPrice(user.id, data);
        await ctx.reply('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ú–æ–∂–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å.');
        return ctx.wizard.next();
      }

      addApiKey = false;
      uploadPrice = false;
      anyPeriodByVendorCode = false;
    });

    stepHandler.on('message', async (ctx) => {
      if (addApiKey) {
        // @ts-ignore
        const { text } = ctx.message;
        console.log(text);
        const isValid = await this.shopServices.isValidToken(text);

        if (isValid) {
          const { id } = ctx.message.from;
          const shop = await this.shopServices.addShop('name', text, id);
          this.wbParserSalesReportService.parseByShopId(shop.id);
          await ctx.reply('–ö–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω');
        } else {
          await ctx.reply(`–¢–æ–∫–µ–Ω ${text} –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π.\n–í–≤–µ–¥–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã–π API —Ç–æ–∫–µ–Ω`);
        }
      } else if (anyPeriodByVendorCode) {
        // @ts-ignore
        const [from, to] = ctx.message.text.trim().split('-');
        const { id } = ctx.message.from;

        const fromDate = moment(from, 'DD.MM.YYYY');
        const toDate = moment(to, 'DD.MM.YYYY');

        if (fromDate.isValid() && toDate.isValid()) {
          const document = await this.telegramService.getSaleReportByVendorCode(id, fromDate.toDate(), toDate.toDate());
          // @ts-ignore
          await ctx.telegram.sendDocument(id, document);
          return ctx.wizard.next();
        } else {
          await ctx.reply('–î–∞—Ç—ã —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ!');
          await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 11.11.1111-11.11.1111');
          return ctx.wizard.next();
        }
      }

      addApiKey = false;
      uploadPrice = false;
      anyPeriodByVendorCode = false;

      return ctx.scene.enter(SCENES.MAIN_MENU);
    });

    const mainMenu = new Scenes.WizardScene(
      SCENES.MAIN_MENU,
      async (ctx) => {
        if (!ctx.message?.from) {
          return ctx.scene.leave();
        }

        const { id, username, first_name, last_name, language_code } = ctx.message.from;
        await this.userRegistrationService.registrationByTelegram(id, username, first_name, last_name, language_code);

        // @ts-ignore
        const button = ctx.message.text;

        console.log(button);

        if (button === 'üü£ –ú–æ–π Wildberries') {
          const { text, menu } = await this.buildInlineMenu(id, 'MAIN_MENU');
          await ctx.reply(text, menu);
          return ctx.wizard.next();
        } else if (button === 'API –ö–ª—é—á') {
          const { text, menu } = await this.buildInlineMenu(id, 'ADD_API_KEY');
          await ctx.reply(text, menu);
          return ctx.wizard.next();
        } else if (button === '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
          const { text, menu } = await this.buildInlineMenu(id, 'SETTINGS');
          await ctx.reply(text, menu);
          return ctx.wizard.next();
        }
        await ctx.reply(
          '–ü—Ä–∏–≤–µ—Ç. –Ø —É–º–Ω—ã–π –±–æ—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.\n' +
            '–†–∞—Å—Å—á–∏—Ç–∞—é –∫–∞–∫–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–µ—Ä–Ω—É–ª–∞—Å—å –∑–∞ –ø–µ—Ä–∏–æ–¥, –∫–∞–∫—É—é —Å—É–º–º—É –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–æ–≥–æ–≤ (—Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è) –∏ —Å–∫–æ–ª—å–∫–æ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å.\n' +
            '–í–æ—Ç —Ç–∞–∫ –ª–µ–≥–∫–æ, –∑–∞ —Å–µ–∫—É–Ω–¥—ã. \n' +
            '–ë–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –≤ –æ–≥—Ä–æ–º–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞. \n',
          Markup.keyboard([
            ['üü£ –ú–æ–π Wildberries'], // Row1 with 2 buttons
            ['‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏'], // Row2 with 2 buttons
          ]).resize(),
        );

        // await ctx.wizard.next();
      },
      stepHandler,
    );

    return mainMenu;
  }

  public async buildInlineMenu(userTgId: number, menuId: string): Promise<{ text: string; menu: Markup.Markup<InlineKeyboardMarkup> }> {
    const user = await this.userService.findUserByTgId(userTgId);
    if (menuId === 'MAIN_MENU') {
      const menu = [];
      const shop = await this.shopServices.findShopByUserID(user.id);

      if (!shop) {
        menu.push([Markup.button.callback('üîë –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ê–ü–ò –∫–ª—é—á', 'newKey')]);
      } else {
        menu.push([Markup.button.callback('üî∏ –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º', 'salesReport')]);
        menu.push([Markup.button.callback('üí∏ C–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤', 'costPrice')]);
      }
      if (user.subscriptionExpirationDate < moment().toDate()) {
        menu.push([Markup.button.callback('üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'ghj')]);
      }

      menu.push([Markup.button.callback('‚ùî –û —Å–µ—Ä–≤–∏—Å–µ', 'aboutBot')]);

      return {
        text: '–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ—Ç—á–µ—Ç—ã.',
        menu: Markup.inlineKeyboard(menu),
      };
    }

    if (menuId === 'ADD_API_KEY') {
      const menu = [];

      const shop = await this.shopServices.findShopByUserID(user.id);

      menu.push([Markup.button.callback('‚ûï –ò–∑–º–µ–Ω–∏—Ç—å API –∫–ª—é—á', 'newKey')]);
      menu.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back')]);

      return {
        text: `–í–∞—à —Ç–µ–∫—É—â–∏–π API –∫–ª—é—á ${shop?.token}`,
        menu: Markup.inlineKeyboard(menu),
      };
    }

    if (menuId === 'SETTINGS') {
      const shop = await this.shopServices.findShopByUserID(user.id);

      const menu = [];

      if (shop) {
        menu.push([Markup.button.callback('‚ûï –ò–∑–º–µ–Ω–∏—Ç—å API –∫–ª—é—á', 'newKey')]);
      }

      menu.push([Markup.button.callback('üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'subscribeSettings')]);

      const countDays = moment(user.subscriptionExpirationDate).diff(moment(), 'days');
      return {
        text: `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${countDays} –¥–Ω—è(–µ–π)\n–í–∞—à API –∫–ª—é—á ${shop.token}`,
        menu: Markup.inlineKeyboard(menu),
      };
    }

    if (menuId === 'SUBSCRIBE_SETTINGS') {
      const menu = [];

      menu.push([Markup.button.callback(`–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü –∑–∞ ${TARIFF_PLANS.TARRIFF_1} —Ä—É–±–ª–µ–π`, 'pay1')]);
      menu.push([Markup.button.callback(`–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 2 –º–µ—Å—è—Ü –∑–∞ ${TARIFF_PLANS.TARRIFF_2} —Ä—É–±–ª–µ–π`, 'pay2')]);
      menu.push([Markup.button.callback(`–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 3 –º–µ—Å—è—Ü –∑–∞ ${TARIFF_PLANS.TARRIFF_3} —Ä—É–±–ª–µ–π`, 'pay3')]);
      menu.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back')]);

      return {
        text: `–¢–µ–∫—Å—Ç...`,
        menu: Markup.inlineKeyboard(menu),
      };
    }

    throw new Error(`Invalid menu ID: ${menuId}`);
  }
}
