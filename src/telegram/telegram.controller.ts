/* eslint-disable @typescript-eslint/ban-ts-comment */
import { Update, Ctx, Start, Help, On, Hears, Command, InjectBot, Message } from 'nestjs-telegraf';
import { UserRegistrationService } from '../user/services/user-registration.service';
import { Markup, Telegraf, Context, session, Composer } from 'telegraf';
import { ProductPriceTemplateService } from '../product/services/product-price-template.service';
import { UserService } from '../user/services/user.service';
import { HttpService } from '@nestjs/axios';
import { map } from 'rxjs';
import { WbXlsxReportBuilder } from '../wb_stats/services/wb-xlsx-report-builder';
type TelegrafContext = any;
import * as moment from 'moment';
import { Scenes } from 'telegraf';
import { WbApiService } from '../wb-api/wb-api.service';
import { ShopServices } from '../shop/services/shop.services';
import { InlineKeyboardMarkup, ReplyKeyboardMarkup } from 'telegraf/src/core/types/typegram';
import { WbParserSalesReportService } from '../wb_stats/services/wb-parser-sales-report.service';
import { TelegramService } from './telegram.service';

const BUTTONS: Record<string, string> = {
  connectWB: '‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—å WB –∞–∫–∫–∞—É–Ω—Ç',
  back: 'üîô –ù–∞–∑–∞–¥',
  report: 'üìä –û—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
  costPrice: 'üí∏ C–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤',
  uploadCostPrice: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏',
  button_10: 'üü¢ –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü',
  button_11: 'üü† –ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü',
  button_12: 'üü£ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥',
  button_13: '–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤)',
  button_14: '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
};

enum SCENES {
  CONNECT_WB = 'CONNECT_WB',
  MAIN_MENU = 'MAIN_MENU',
  REPORT = 'REPORT',
  REPORT3 = 'REPORT3',
  SET_COST_PRICE = 'SET_COST_PRICE',
  SET_COST_PRICE2 = 'SET_COST_PRICE2',
}

let uploadPrice = false;
let addApiKey = false;
let anyPeriodByProduct = false;

@Update()
export class TelegramController {
  // @ts-ignore
  private stage: Scenes.Stage;
  constructor(
    private readonly userRegistrationService: UserRegistrationService,
    private readonly productPriceTemplateService: ProductPriceTemplateService,
    private readonly userService: UserService,
    private readonly httpService: HttpService,
    private readonly wbXlsxReportBuilder: WbXlsxReportBuilder,
    private readonly wbApiService: WbApiService,
    private readonly wbParserSalesReportService: WbParserSalesReportService,
    private readonly shopServices: ShopServices,
    private readonly telegramService: TelegramService,
    @InjectBot() private bot: Telegraf<TelegrafContext>,
  ) {
    // @ts-ignore
    this.stage = new Scenes.Stage<Context>([this.getMainMenuScene(), this.getReportScene()], {
      default: SCENES.MAIN_MENU,
    });
    this.bot.use(session()); // to  be precise, session is not a must have for Scenes to work, but it sure is lonely without one
    this.bot.use(this.stage.middleware());

    // @ts-ignore//
    this.bot.command('start', Scenes.Stage.enter(SCENES.MAIN_MENU));
  }

  public async sleep(val = 5): Promise<void> {
    return new Promise((res) => {
      const id = setTimeout(() => {
        clearInterval(id);
        res();
      }, val * 100);
    });
  }

  public getMainMenuScene(): any {
    const stepHandler = new Composer<Scenes.WizardContext>();
    stepHandler.action('getCostPrice', async (ctx) => {
      const { id } = ctx.from;
      const user = await this.userService.findUserByTgId(id);
      const buffer = await this.productPriceTemplateService.getPriceTemplate(user.id);

      await ctx.telegram.sendDocument(ctx.from.id, {
        source: buffer,
        filename: 'price.xlsx',
      });
      await ctx.answerCbQuery();
    });
    stepHandler.action('updateCostPrice', async (ctx) => {
      uploadPrice = true;
      return ctx.reply('–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–∞–π–ª —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏');
    });
    stepHandler.action('costPrice', async (ctx) => {
      return ctx.editMessageText(
        '–¢–µ–∫—Å—Ç...',
        Markup.inlineKeyboard([
          [Markup.button.callback('üí∏ Ô∏è –¢–µ–∫—É—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å', 'getCostPrice')],
          [Markup.button.callback('üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å', 'updateCostPrice')],
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back')],
        ]),
      );
    });
    stepHandler.action('aboutBot', async (ctx) => {
      const { id } = ctx.from;
      return ctx.editMessageText('–¢–µ–∫—Å—Ç –æ –±–æ—Ç–µ...', Markup.inlineKeyboard([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back')]));
    });
    stepHandler.action('back', async (ctx) => {
      const { id } = ctx.from;
      return ctx.editMessageText('ff', await this.buildInlineMenu(id, 'MAIN_MENU'));
    });
    stepHandler.action('addKey', async (ctx) => {
      const { id } = ctx.from;
      return ctx.editMessageText(
        '–í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á Wildberries\n' +
          '–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á.\n' +
          '‚ö†Ô∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á (–•64) –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é‚ö†Ô∏è',
        await this.buildInlineMenu(id, 'ADD_API_KEY'),
      );
    });

    stepHandler.action('currentMonthByProduct', async (ctx) => {
      const { id } = ctx.from;

      const document = await this.telegramService.getSaleReportByVendorCodeForCurrentMonth(id);
      // @ts-ignorereturn ctx.wizard.next();
      await ctx.telegram.sendDocument(id, document);
      await ctx.answerCbQuery();
      return;
    });

    stepHandler.action('previousMonthByProduct', async (ctx) => {
      const { id } = ctx.from;
      const document = await this.telegramService.getSaleReportByVendorCodeForPreviousMonth(id);
      // @ts-ignore
      await ctx.telegram.sendDocument(id, document);
      await ctx.answerCbQuery();
      return;
    });

    stepHandler.action('anyPeriodByProduct', async (ctx) => {
      await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 11.11.1111-11.11.1111');
      anyPeriodByProduct = true;
    });

    stepHandler.action('reportByProduct', async (ctx) => {
      const { id } = ctx.from;
      return ctx.editMessageText(
        '–¢–µ–∫—Å—Ç...',
        Markup.inlineKeyboard([
          [Markup.button.callback(BUTTONS.button_10, 'currentMonthByProduct')],
          [Markup.button.callback(BUTTONS.button_11, 'previousMonthByProduct')],
          [Markup.button.callback(BUTTONS.button_12, 'anyPeriodByProduct')],
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back')],
        ]),
      );
    });

    stepHandler.action('newKey', async (ctx) => {
      addApiKey = true;
      return ctx.reply('–û—Ç–ø—Ä–∞–≤—Ç–µ –≤–∞—à –∫–ª—é—á –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏');
    });

    stepHandler.action('salesReport', async (ctx) => {
      return await ctx.editMessageText(
        '–¢–µ–∫—Å—Ç...',
        Markup.inlineKeyboard([
          [Markup.button.callback('–û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º', 'reportByProduct')],
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back')],
        ]),
      );
    });

    stepHandler.on('document', async (ctx) => {
      if (uploadPrice) {
        const link = await ctx.telegram.getFileLink(ctx.update.message.document.file_id);
        console.log(link);

        const data = await this.httpService
          .get(link.href, { responseType: 'arraybuffer' })
          .pipe(map(({ data }) => data))
          .toPromise();

        const { id } = ctx.message.from;
        const user = await this.userService.findUserByTgId(id);
        await this.productPriceTemplateService.setPrice(user.id, data);
        await ctx.reply('üëç');
        return ctx.wizard.next();
      }

      uploadPrice = false;
    });
    stepHandler.on('message', async (ctx) => {
      if (addApiKey) {
        // @ts-ignore
        const { text } = ctx.message;
        console.log(text);
        const isValid = await this.shopServices.isValidToken(text);

        if (isValid) {
          const { id } = ctx.message.from;
          const shop = await this.shopServices.addShop('name', text, id);
          this.wbParserSalesReportService.parseByShopId(shop.id);
          await ctx.reply('–ö–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω');
        } else {
          await ctx.reply(`–¢–æ–∫–µ–Ω ${text} –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π.\n–í–≤–µ–¥–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã–π API —Ç–æ–∫–µ–Ω`);
        }
      } else if (anyPeriodByProduct) {
        // @ts-ignore
        const [from, to] = ctx.message.text.trim().split('-');
        const { id } = ctx.message.from;

        const fromDate = moment(from, 'DD.MM.YYYY');
        const toDate = moment(to, 'DD.MM.YYYY');

        if (fromDate.isValid() && toDate.isValid()) {
          const document = await this.telegramService.getSaleReportByVendorCode(id, fromDate.toDate(), toDate.toDate());
          // @ts-ignore
          await ctx.telegram.sendDocument(id, document);
        } else {
          await ctx.reply('–î–∞—Ç—ã —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ!');
          await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 11.11.1111-11.11.1111');
        }
      }

      addApiKey = false;
      uploadPrice = false;
      anyPeriodByProduct = false;

      return ctx.wizard.next();
    });

    stepHandler.use(async (ctx) => {
      console.log(ctx.message);
      // @ts-ignore
      const { text } = ctx.message;
      console.log(text);
      const isValid = await this.shopServices.isValidToken(text);

      if (isValid) {
        const { id } = ctx.message.from;
        const shop = await this.shopServices.addShop('name', text, id);
        this.wbParserSalesReportService.parseByShopId(shop.id);
        await ctx.reply('–ö–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω');
      } else {
        await ctx.reply(`–¢–æ–∫–µ–Ω ${text} –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π.\n–í–≤–µ–¥–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã–π API —Ç–æ–∫–µ–Ω`);
      }

      return ctx.wizard.next();
    });

    const mainMenu = new Scenes.WizardScene(
      SCENES.MAIN_MENU,
      async (ctx) => {
        if (!ctx.message?.from) {
          return ctx.scene.leave();
        }

        const { id, username, first_name, last_name, language_code } = ctx.message.from;
        await this.userRegistrationService.registrationByTelegram(id, username, first_name, last_name, language_code);

        // @ts-ignore
        const button = ctx.message.text;

        console.log(button);

        if (button === BUTTONS.connectWB) {
          return ctx.scene.enter(SCENES.CONNECT_WB);
        } else if (button === BUTTONS.report) {
          return ctx.scene.enter(SCENES.REPORT);
        } else if (button === BUTTONS.costPrice) {
          return ctx.scene.enter(SCENES.SET_COST_PRICE);
        } else if (button === BUTTONS.uploadCostPrice) {
          return ctx.scene.enter(SCENES.SET_COST_PRICE2);
        } else if (button === BUTTONS.button_13) {
          return ctx.scene.enter(SCENES.REPORT3);
        } else if (button === BUTTONS.button_14) {
          const url = await this.telegramService.createPayment(id);
          return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–æ—Ç–∞', Markup.inlineKeyboard([Markup.button.url('–û–ø–ª–∞—Ç–∏—Ç—å', url)]));
        }
        await ctx.reply(
          '–ú–æ–π Wildberries\n' + '–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ—Ç—á–µ—Ç—ã.',
          await this.buildInlineMenu(id, 'MAIN_MENU'),
        );
        await ctx.wizard.next();
      },
      stepHandler,
    );

    return mainMenu;
  }

  public getReportScene(): any {
    let fromDate: Date;
    let toDate: Date;
    const stepHandler = new Composer<Scenes.WizardContext>();
    stepHandler.action('currentMonth', async (ctx) => {
      const { id } = ctx.from;
      const document = await this.telegramService.getSaleReportByVendorCodeForCurrentMonth(id);
      // @ts-ignorereturn ctx.wizard.next();
      await ctx.telegram.sendDocument(id, document);
      await ctx.answerCbQuery();
      return;
    });
    stepHandler.action('previousMonth', async (ctx) => {
      const { id } = ctx.from;
      const document = await this.telegramService.getSaleReportByVendorCodeForPreviousMonth(id);
      // @ts-ignore
      await ctx.telegram.sendDocument(id, document);
      await ctx.answerCbQuery();
      return;
    });
    stepHandler.action('anyPeriod', async (ctx) => {
      console.log(ctx.message);
      await ctx.reply('d');
      await ctx.answerCbQuery();
      return;
    });
    stepHandler.action('reportByVendorCode', async (ctx) => {
      await ctx.editMessageText(
        '<b>–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º (–∞—Ä—Ç–∏–∫—É–ªg—ã)</b>\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ...',
        Markup.inlineKeyboard([
          [Markup.button.callback(BUTTONS.button_10, 'currentMonth')],
          [Markup.button.callback(BUTTONS.button_11, 'previousMonth')],
          [Markup.button.callback(BUTTONS.button_12, 'anyPeriod')],
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back')],
        ]),
      );
      await ctx.answerCbQuery();
    });
    stepHandler.action('reportByProduct', async (ctx) => {
      await ctx.editMessageText(
        '<b>–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º (–∞—Ä—Ç–∏rr–∫—É–ª—ã)</b>\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ...',
        Markup.inlineKeyboard([
          [Markup.button.callback(BUTTONS.button_10, 'currentMonth')],
          [Markup.button.callback(BUTTONS.button_11, 'previousMonth')],
          // [Markup.button.text('previousMonth', false)],
          [Markup.button.callback(BUTTONS.button_12, 'anyPeriod')],
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back')],
        ]),
      );
    });
    stepHandler.action('back', async (ctx) => {
      await ctx.editMessageText(
        '<b>–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º</b>\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ...',
        Markup.inlineKeyboard([
          [Markup.button.callback('–û—Ç—á–µ—Ç –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º', 'reportByVendorCode')],
          [Markup.button.callback('–û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º', 'reportByProduct')],
        ]),
      );
      await ctx.answerCbQuery();
    });

    stepHandler.use(async (ctx) => {
      // @ts-ignore
      const [from, to] = ctx.message.text.trim().split('-');
      const { id } = ctx.message.from;

      const fromDate = moment(from, 'DD.MM.YYYY');
      const toDate = moment(to, 'DD.MM.YYYY');

      if (fromDate.isValid() && toDate.isValid()) {
        const document = await this.telegramService.getSaleReportByVendorCode(id, fromDate.toDate(), toDate.toDate());
        // @ts-ignore
        await ctx.telegram.sendDocument(id, document);
      } else {
        await ctx.reply('–î–∞—Ç—ã —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ!');
        await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 11.11.1111-11.11.1111');
      }
    });

    const scene = new Scenes.WizardScene(
      SCENES.REPORT,
      async (ctx) => {
        await ctx.reply(
          '–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞\n' + '–¢–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤',
          Markup.inlineKeyboard([
            [Markup.button.callback('üî∏ –û—Ç—á–µ—Ç –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º', 'reportByVendorCode')],
            [Markup.button.callback('üì¶ –û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º', 'reportByProduct')],
          ]),
        );

        return ctx.wizard.next();
      },

      stepHandler,
    );

    return scene;
  }

  public async buildInlineMenu(userTgId: number, menuId: string): Promise<Markup.Markup<InlineKeyboardMarkup>> {
    const user = await this.userService.findUserByTgId(userTgId);
    if (menuId === 'MAIN_MENU') {
      const menu = [];
      const shop = await this.shopServices.findShopByUserID(user.id);

      if (!shop) {
        menu.push([Markup.button.callback('üîë –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ê–ü–ò –∫–ª—é—á', 'addKey')]);
      } else {
        menu.push([Markup.button.callback('üî∏ –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º', 'salesReport')]);
        menu.push([Markup.button.callback('üí∏ C–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤', 'costPrice')]);
      }
      if (user.subscriptionExpirationDate < moment().toDate()) {
        menu.push([Markup.button.callback('üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'ghj')]);
      }

      menu.push([Markup.button.callback('‚ùî –û —Å–µ—Ä–≤–∏—Å–µ', 'aboutBot')]);

      return Markup.inlineKeyboard(menu);
    }

    if (menuId === 'ADD_API_KEY') {
      const menu = [];

      menu.push([Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á', 'newKey'), Markup.button.callback('‚ùî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', 'newKeyInstruction')]);

      menu.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back')]);

      return Markup.inlineKeyboard(menu);
    }

    throw new Error(`Invalid menu ID: ${menuId}`);
  }
}
